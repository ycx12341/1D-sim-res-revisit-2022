m[1] <- dm * (m[2] - 2 * m[1] + m[2]) * dt / (h ^ 2) +
alpha * n[1] * dt - beta * m[1] * dt + m[1]
m[n.x11] <- dm * (m[n.x11 - 1] - 2 * m[n.x11] + m[n.x11 - 1]) * dt / (h ^ 2) +
alpha * n[n.x11] * dt - beta * m[n.x11] * dt + m[n.x11]
#n[1] <- n[2]
#n[n.x11] <- n[n.x11 - 1]
#f[1] <- f[2]
#f[n.x11] <- f[n.x11 - 1]
#m[1] <- m[2]
#m[n.x11] <- m[n.x11 - 1]
res.full <- rbind(res.full,n,f,m)
# Save the results at each integer time steps
if(p %% int.timesteps == 0) {
res <- rbind(res, n, f, m)
}
p <- p + 1
}
# Separate results of n, f and m at the 11 integer timepoints.
n.res <- res[seq(1, (length(res[, 1]) - 2), by = 3), ]
f.res <- res[seq(2, (length(res[, 1]) - 1), by = 3), ]
m.res <- res[seq(3, length(res[, 1]), by = 3), ]
View(n.res)
cv1_sim1_res <- readRDS("D:/Academia/Gradient matching revisit 2022/Gamma errors (imaginary cells BC)/Gradient plots/SimRes_ests/cv1_sim1_res.rds")
View(cv1_sim1_res)
cv1_sim1_res[["ref.data.trun"]][["n"]]
# Separate full results of n, f and m
n.res.full <- res.full[seq(1, (length(res.full[, 1]) - 2), by = 3), ]
f.res.full <- res.full[seq(2, (length(res.full[, 1]) - 1), by = 3), ]
m.res.full <- res.full[seq(3, length(res.full[, 1]), by = 3), ]
ind <- seq(0, 10, by = 0.001)
# dndt
dndt <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(dndt[, 1])) {
for (j in 1:length(dndt[1,])) {
dndt[i,j] <- (n.res.full[(i * 1000 + 2), (j + 1)] - n.res.full[(i * 1000), (j + 1)])/(2*dt)
}
}
# dfdt
dfdt <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(dfdt[, 1])) {
for (j in 1:length(dfdt[1, ])) {
dfdt[i,j] <- (f.res.full[(i * 1000 + 2), (j + 1)] - f.res.full[(i * 1000), (j + 1)]) / (2 * dt)
}
}
# dmdt
dmdt <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(dmdt[, 1])) {
for (j in 1:length(dmdt[1, ])) {
dmdt[i,j] <- (m.res.full[(i * 1000 + 2), (j + 1)] - m.res.full[(i * 1000), (j + 1)]) / (2 * dt)
}
}
# dn (second order derivative)
d2ndx2 <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(d2ndx2[, 1])) {
for (j in 1:length(d2ndx2[1, ])) {
d2ndx2[i,j] <- (n.res.full[(i * 1000 + 1), (j + 2)] + n.res.full[(i * 1000 + 1), j]
- 2 * n.res.full[(i * 1000 + 1), (j + 1)]) / (h ^ 2)
}
}
# gamma (haptotaxis)
hap <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(hap[, 1])) {
for (j in 1:length(hap[1, ])) {
dndx.temp <- (n.res.full[(i * 1000 + 1), (j + 2)] - n.res.full[(i * 1000 + 1), j]) / (2 * h)
dfdx.temp <- (f.res.full[(i * 1000 + 1), (j + 2)] - f.res.full[(i * 1000 + 1), j]) / (2 * h)
n.temp <- n.res.full[(i * 1000 + 1), (j + 1)]
d2fdx2.temp <- (f.res.full[(i * 1000 + 1), (j + 2)] + f.res.full[(i * 1000 + 1), j]
- 2 * f.res.full[(i * 1000 + 1), (j + 1)]) / (h ^ 2)
hap[i, j] <- dndx.temp * dfdx.temp + n.temp * d2fdx2.temp
}
}
# rn (logistic growth)
logis <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(logis[, 1])) {
for (j in 1:length(logis[1, ])) {
logis[i, j] <- n.res.full[(i * 1000 + 1), (j + 1)] * (1 - n.res.full[(i * 1000 + 1), (j + 1)] -
f.res.full[(i * 1000 + 1), (j + 1)])
}
}
# eta (decay of ecm)
mf <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(logis[, 1])) {
for (j in 1:length(logis[1, ])) {
mf[i, j] <- m.res.full[(i * 1000 + 1), (j + 1)] * f.res.full[(i * 1000 + 1), (j + 1)]
}
}
# dm (second order derivative)
d2mdx2 <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(d2mdx2[, 1])) {
for (j in 1:length(d2mdx2[1, ])) {
d2mdx2[i,j] <- (m.res.full[(i * 1000 + 1), (j + 2)] + m.res.full[(i * 1000 + 1), j]
- 2 * m.res.full[(i * 1000 + 1), (j + 1)]) / (h ^ 2)
}
}
# alpha (growth of mde)
tc.den <- matrix(0, nrow = 9, ncol = (n.x11 - 2))
for (i in 1:length(tc.den[, 1])) {
for (j in 1:length(tc.den[1, ])) {
tc.den[i,j] <- n.res.full[(i * 1000 + 1), (j + 1)]
}
}
# Write the true gradients into a .txt file
ref.grads.fds <- cbind(dndt, d2ndx2, hap, logis, dfdt, mf, dmdt, d2mdx2, tc.den)
write.table(ref.grads.fds, "True gradients forward difference scheme.txt")
# Gradients averaged over time and data sets.R
# Author: Yunchen Xiao
rm(list = ls())
in.dir <- "SimRes_ests"
n.sims <- 200
# dndt (Tumour cells temporal gradients)
mean.temp.gradients.n <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.lhs_n
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.n[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.n, "Mean temporal grads tc.txt")
# dn gradients
mean.temp.gradients.dn <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_dn
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.dn[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.dn, "Mean spatial grads dn.txt")
# gamma gradients
mean.temp.gradients.gamma <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_gamma
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.gamma[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.gamma, "Mean spatial grads gamma.txt")
# rn gradients
mean.temp.gradients.rn <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_r
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.rn[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.rn, "Mean spatial grads rn.txt")
# dfdt (ECM temporal gradients)
mean.temp.gradients.ecm <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.lhs_f
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.ecm[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.ecm, "Mean temporal grads ecm.txt")
# eta gradients
mean.temp.gradients.ita <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_ita
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.ita[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.ita, "Mean spatial grads ita.txt")
# dmdt (Temporal gradients of MDE)
mean.temp.gradients.mde <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.lhs_m
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.mde[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.mde, "Mean temporal grads mde.txt")
# dm gradients
mean.temp.gradients.dm <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_dm
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.dm[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.dm, "Mean spatial grads dm.txt")
# alpha gradients
mean.temp.gradients.alpha <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_alpha
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.alpha[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.alpha, "Mean spatial grads alpha.txt")
ref.grads.gam <- read.table("Reference gradients GAM imaginary cells BC.txt", sep = "", header = TRUE)
tc.temp.mean <- apply(as.matrix(ref.grads.gam[1:9, 1:78]), 2, mean)
dn.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 79:156]), 2, mean)
ga.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 157:234]), 2, mean)
rn.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 235:312]), 2, mean)
ecm.temp.mean <- apply(as.matrix(ref.grads.gam[1:9, 313:390]), 2, mean)
eta.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 391:468]), 2, mean)
mde.temp.mean <- apply(as.matrix(ref.grads.gam[1:9, 469:546]), 2, mean)
dm.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 547:624]), 2, mean)
alpha.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 625:702]), 2, mean)
ref.grad.gam.mean <- rbind(tc.temp.mean, dn.spat.mean, ga.spat.mean, rn.spat.mean,
ecm.temp.mean, eta.spat.mean, mde.temp.mean, dm.spat.mean,
alpha.spat.mean)
write.table(ref.grad.gam.mean, "Mean reference data grads gam.txt")
write.table(ref.grads.fds, "True gradients forward difference scheme imaginary cells BC.txt")
ref.grads.fds <- read.table("True gradients forward difference scheme imaginary cells BC.txt", sep = "", header = TRUE)
tc.temp.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 1:78]), 2, mean)
dn.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 79:156]), 2, mean)
ga.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 157:234]), 2, mean)
rn.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 235:312]), 2, mean)
ecm.temp.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 313:390]), 2, mean)
eta.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 391:468]), 2, mean)
mde.temp.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 469:546]), 2, mean)
dm.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 547:624]), 2, mean)
alpha.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 625:702]), 2, mean)
ref.grad.fds.mean <- rbind(tc.temp.mean.fds, dn.spat.mean.fds, ga.spat.mean.fds, rn.spat.mean.fds,
ecm.temp.mean.fds, eta.spat.mean.fds, mde.temp.mean.fds, dm.spat.mean.fds,
alpha.spat.mean.fds)
write.table(ref.grad.fds.mean, "Mean reference data grads fds.txt")
# Read in the gradients predicted by GAM which can be used for comparison
# in plots. (Optional)
# ref.grads.gam <- as.matrix(read.table("Reference gradients GAM.txt", sep = "", header = TRUE))
rm(list = ls())
setwd("D:/Academia/Gradient matching revisit 2022/Normal errors (normal BC)/Gradient plots")
# Read in the gradients predicted by GAM which can be used for comparison
# in plots. (Optional)
# ref.grads.gam <- as.matrix(read.table("Reference gradients GAM.txt", sep = "", header = TRUE))
rm(list = ls())
# 1D dimensionless space
n.x11 <- 80
x11 <- seq(0, 1, length = n.x11)
h <- x11[2] - x11[1]
# Time
T <- 10
dt <- 0.001
t <- seq(0, T, by = 0.001)
int.timesteps <- 1 / dt
# Parameters
dn <- 0.01
gamma <- 0.05
ita <- 10
dm <- 0.01
alpha <- 0.1
r <- 5
beta <- 0
eps <- 0.01
# Initial condition
n0 <- rep(0, n.x11)
for (i in 1:n.x11) {
if (x11[i] <= 0.25) {
n0[i] <- exp((-x11[i] ^ 2) / eps)
} else {
n0[i] <- 0
}
}
n <- n0
f0 <- 1 - 0.5 * n0
f <- f0
m0 <- 0.5 * n0
m <- m0
# Store the initial values into the result matrix
res <- matrix(0, 3, n.x11)
res [1, ] <- n0
res [2, ] <- f0
res [3, ] <- m0
res.full <- res
# Run the equation
p <- 1
while(p * dt <= T) {
f[2:(n.x11 - 1)] <- -ita * dt * m[2:(n.x11 - 1)] * f[2:(n.x11 - 1)] +
f[2:(n.x11 - 1)]
m[2:(n.x11 - 1)] <- dm * (m[1:(n.x11 - 2)] + m[3:n.x11] - 2 * m[2:(n.x11 - 1)]) * dt / (h ^ 2) +
alpha * n[2:(n.x11 - 1)] * dt -
beta * m[2:(n.x11 - 1)] * dt + m[2:(n.x11 - 1)]
n[2:(n.x11 - 1)] <- dn * (n[1:(n.x11 - 2)] + n[3:n.x11] - 2 * n[2:(n.x11 - 1)]) * dt / (h ^ 2) -
gamma * (n[3:n.x11] - n[2:(n.x11 - 1)]) * (f[3:n.x11]-f[2:(n.x11 - 1)]) * dt / (h ^ 2) -
gamma * n[2:(n.x11 - 1)] * (f[1:(n.x11 - 2)] + f[3:n.x11] - 2 * f[2:(n.x11 - 1)]) * dt / (h ^ 2) +
r * (1 - f[2:(n.x11 - 1)] - n[2:(n.x11 - 1)]) * n[2:(n.x11 - 1)] * dt + n[2:(n.x11 - 1)]
#No flux boundary condition
n[1] <- n[2]
n[n.x11] <- n[n.x11 - 1]
f[1] <- f[2]
f[n.x11] <- f[n.x11 - 1]
m[1] <- m[2]
m[n.x11] <- m[n.x11 - 1]
res.full <- rbind(res.full,n,f,m)
# Save the results at each integer time steps
if(p %% int.timesteps == 0) {
res <- rbind(res, n, f, m)
}
p <- p + 1
}
# Separate results of n, f and m at the 11 integer timepoints.
n.res <- res[seq(1, (length(res[, 1]) - 2), by = 3), ]
f.res <- res[seq(2, (length(res[, 1]) - 1), by = 3), ]
m.res <- res[seq(3, length(res[, 1]), by = 3), ]
# Separate full results of n, f and m
n.res.full <- res.full[seq(1, (length(res.full[, 1]) - 2), by = 3), ]
f.res.full <- res.full[seq(2, (length(res.full[, 1]) - 1), by = 3), ]
m.res.full <- res.full[seq(3, length(res.full[, 1]), by = 3), ]
View(n.res)
cv1_sim1_res <- readRDS("D:/Academia/Gradient matching revisit 2022/Normal errors (normal BC)/Gradient plots/SimRes_ests/cv1_sim1_res.rds")
View(cv1_sim1_res)
cv1_sim1_res[["ref.data.trun"]][["n"]]
# Gradients averaged over time and data sets.R
# Author: Yunchen Xiao
rm(list = ls())
in.dir <- "SimRes_ests"
n.sims <- 200
# dndt (Tumour cells temporal gradients)
mean.temp.gradients.n <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.lhs_n
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.n[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.n, "Mean temporal grads tc.txt")
# dn gradients
mean.temp.gradients.dn <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_dn
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.dn[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.dn, "Mean spatial grads dn.txt")
# gamma gradients
mean.temp.gradients.gamma <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_gamma
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.gamma[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.gamma, "Mean spatial grads gamma.txt")
# rn gradients
mean.temp.gradients.rn <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_r
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.rn[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.rn, "Mean spatial grads rn.txt")
# dfdt (ECM temporal gradients)
mean.temp.gradients.ecm <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.lhs_f
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.ecm[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.ecm, "Mean temporal grads ecm.txt")
# eta gradients
mean.temp.gradients.ita <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_ita
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.ita[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.ita, "Mean spatial grads ita.txt")
# dmdt (Temporal gradients of MDE)
mean.temp.gradients.mde <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.lhs_m
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.mde[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.mde, "Mean temporal grads mde.txt")
# dm gradients
mean.temp.gradients.dm <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_dm
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.dm[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.dm, "Mean spatial grads dm.txt")
# alpha gradients
mean.temp.gradients.alpha <- matrix(0, nrow = 5, ncol = 78)
for (i in 1:5) {
temp.grad.cvi <- matrix(0, nrow = 9, ncol = 78)
for (j in 1:n.sims) {
temp.res <- readr::read_rds(paste0("./", in.dir, "/cv", i, "_sim", j, "_res.rds"))$grads
temp.grad <- temp.res$grad.rhs_alpha
temp.grad.cvi <- temp.grad.cvi + temp.grad
}
temp.grad.cvi <- temp.grad.cvi / n.sims
temp.grad.cvi.mean <- apply(temp.grad.cvi, 2, mean)
mean.temp.gradients.alpha[i, ] <- temp.grad.cvi.mean
}
write.table(mean.temp.gradients.alpha, "Mean spatial grads alpha.txt")
ref.grads.gam <- read.table("Reference gradients GAM imaginary cells BC.txt", sep = "", header = TRUE)
tc.temp.mean <- apply(as.matrix(ref.grads.gam[1:9, 1:78]), 2, mean)
ref.grads.gam <- read.table("Reference gradients GAM.txt", sep = "", header = TRUE)
tc.temp.mean <- apply(as.matrix(ref.grads.gam[1:9, 1:78]), 2, mean)
dn.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 79:156]), 2, mean)
ga.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 157:234]), 2, mean)
rn.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 235:312]), 2, mean)
ecm.temp.mean <- apply(as.matrix(ref.grads.gam[1:9, 313:390]), 2, mean)
eta.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 391:468]), 2, mean)
mde.temp.mean <- apply(as.matrix(ref.grads.gam[1:9, 469:546]), 2, mean)
dm.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 547:624]), 2, mean)
alpha.spat.mean <- apply(as.matrix(ref.grads.gam[1:9, 625:702]), 2, mean)
ref.grad.gam.mean <- rbind(tc.temp.mean, dn.spat.mean, ga.spat.mean, rn.spat.mean,
ecm.temp.mean, eta.spat.mean, mde.temp.mean, dm.spat.mean,
alpha.spat.mean)
write.table(ref.grad.gam.mean, "Mean reference data grads gam.txt")
ref.grads.fds <- read.table("True gradients forward difference scheme.txt", sep = "", header = TRUE)
tc.temp.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 1:78]), 2, mean)
dn.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 79:156]), 2, mean)
ga.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 157:234]), 2, mean)
rn.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 235:312]), 2, mean)
ecm.temp.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 313:390]), 2, mean)
eta.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 391:468]), 2, mean)
mde.temp.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 469:546]), 2, mean)
dm.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 547:624]), 2, mean)
alpha.spat.mean.fds <- apply(as.matrix(ref.grads.fds[1:9, 625:702]), 2, mean)
ref.grad.fds.mean <- rbind(tc.temp.mean.fds, dn.spat.mean.fds, ga.spat.mean.fds, rn.spat.mean.fds,
ecm.temp.mean.fds, eta.spat.mean.fds, mde.temp.mean.fds, dm.spat.mean.fds,
alpha.spat.mean.fds)
write.table(ref.grad.fds.mean, "Mean reference data grads fds.txt")
cv1_sim1_res <- readRDS("D:/Academia/Gradient matching revisit 2022/Normal errors (normal BC)/SimRes_ests/cv1_sim1_res.rds")
View(cv1_sim1_res)
