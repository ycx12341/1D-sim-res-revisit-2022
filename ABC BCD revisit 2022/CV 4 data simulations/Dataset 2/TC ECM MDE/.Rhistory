if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Generate the initial parameters used in the evaluations of ECM density
# profile.
set.seed(123)
RNGkind(sample.kind = "Rejection")
dn<-runif(10000,0.000069,0.02)
gamma<-runif(10000,0.005,0.26)
eta<-runif(10000,7,18)
dm<-runif(10000,0.0001,0.033)
alpha<-runif(10000,0.07,0.18)
rn<-runif(10000,3.5,9)
paras.ecm.r1 <- cbind(dn,gamma,eta,dm,alpha,rn)
write.table(paras.ecm.r1,"Round 1 parameters 10000 ecm.txt")
paras.ecm.r1 <- as.matrix(read.table("Round 1 parameters 10000 ecm.txt", sep = "",
header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.r1[i,], paras.ind = "ecm")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_1_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_r1.txt")
bcd.ecm.r1 <- unname(ests)
ind.nan.ecm.r1 <- which(is.na(bcd.ecm.r1[,2]))
bcd.ecm.r1.valid <- bcd.ecm.r1[-ind.nan.ecm.r1,]
mean(bcd.ecm.r1.valid[,2]) # 4.004779
min(bcd.ecm.r1.valid[,2]) # 0.08130479
# Resample and record the parameters to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.ecm.r2 <- abc.bcd(ss.mat = bcd.ecm.r1, paras = paras.ecm.r1, bw = 0.5)
write.table(paras.ecm.r2, "Round 2 parameters 10000 ecm.txt")
# Clear the current workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the simulation results in .rds
# files.
save.sims.dir <- "BCD_results_ecm_r2"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameters to be evaluated in the current round.
paras.ecm.r2 <- as.matrix(read.table("Round 2 parameters 10000 ecm.txt", sep = "",
header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.r2[i,], paras.ind = "ecm")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_2_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_r2.txt")
# Calculate and record the average summary statistics of the parameters being
# investigated in the current round, the stopping criterion (80% reduction in
# the mean summary statistics of the initial parameters) has not been met
# yet!
bcd.ecm.r2 <- unname(ests)
ind.nan.ecm.r2 <- which(is.na(bcd.ecm.r2[,2]))
bcd.ecm.r2.valid <- bcd.ecm.r2[-ind.nan.ecm.r2,]
mean(bcd.ecm.r2.valid[,2]) # 2.81016
min(bcd.ecm.r2.valid[,2]) # 0.07861882
# Resample and record the parameters to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.ecm.r3 <- abc.bcd(ss.mat = bcd.ecm.r2, paras = paras.ecm.r2, bw = 0.75)
write.table(paras.ecm.r3, "Round 3 parameters 10000 ecm.txt")
# Clear the current workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the simulation results in .rds
# files.
save.sims.dir <- "BCD_results_ecm_r3"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameters to be evaluated in the current round.
paras.ecm.r3 <- as.matrix(read.table("Round 3 parameters 10000 ecm.txt", sep = "",
header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.r3[i,], paras.ind = "ecm")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_3_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_r3.txt")
# Calculate and record the average summary statistics of the parameters being
# investigated in the current round, the stopping criterion (80% reduction in
# the mean summary statistics of the initial parameters) has not been met
# yet!
bcd.ecm.r3 <- unname(ests)
ind.nan.ecm.r3 <- which(is.na(bcd.ecm.r3[,2]))
bcd.ecm.r3.valid <- bcd.ecm.r3[-ind.nan.ecm.r3,]
mean(bcd.ecm.r3.valid[,2]) # 1.280963
min(bcd.ecm.r3.valid[,2]) # 0.07794311
# Resample and record the parameters to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.ecm.r4 <- abc.bcd(ss.mat = bcd.ecm.r3, paras = paras.ecm.r3, bw = 1.125)
write.table(paras.ecm.r4, "Round 4 parameters 10000 ecm.txt")
# Clear the current workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the simulation results in .rds
# files.
save.sims.dir <- "BCD_results_ecm_r4"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameters to be evaluated in the current round.
paras.ecm.r4 <- as.matrix(read.table("Round 4 parameters 10000 ecm.txt", sep = "",
header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.r4[i,], paras.ind = "ecm")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_4_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_r4.txt")
# Calculate and record the average summary statistics of the parameters being
# investigated in the current round, the stopping criterion (80% reduction in
# the mean summary statistics of the initial parameters) has been met! We
# record the values of $\eta$ and proceed to the evaluations of the ECM + MDE
# density profiles.
bcd.ecm.r4 <- unname(ests)
ind.nan.ecm.r4 <- which(is.na(bcd.ecm.r4[,2]))
bcd.ecm.r4.valid <- bcd.ecm.r4[-ind.nan.ecm.r4,]
mean(bcd.ecm.r4.valid[,2]) # 0.3368942
min(bcd.ecm.r4.valid[,2]) # 0.07760863
3.966822*0.2
setwd("F:/学术/ABC-BCD revisit 2022/CV 4 data simulations/Dataset 2/ECM MDE")
# Clear the workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the simulation results in .rds
# files.
save.sims.dir <- "BCD_results_ecm_mde_r1"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameter values at the end of the evaluations of the ECM density
# profile.
paras.ecm.r4 <- as.matrix(read.table("Round 4 parameters 10000 ecm.txt",
sep = "", header = TRUE))
# Read in the values of $\eta$ from the parameter set above as the initial
# values of $\eta$ in the current evaluations, sample the values of the other
# parameters from the initial distributions.
set.seed(121)
RNGkind(sample.kind = "Rejection")
dn<-runif(10000,0.000069,0.02)
gamma<-runif(10000,0.005,0.26)
eta<-paras.ecm.r4[,3]
dm<-runif(10000,0.0001,0.033)
alpha<-runif(10000,0.07,0.18)
rn<-runif(10000,3.5,9)
paras.ecm.mde.r1 <- cbind(dn,gamma,eta,dm,alpha,rn)
write.table(paras.ecm.mde.r1,"Round 1 parameters 10000 ecm_mde.txt")
paras.ecm.mde.r1 <- as.matrix(read.table("Round 1 parameters 10000 ecm_mde.txt", sep = "",
header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r1[i,], paras.ind = "ecm_mde")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_1_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r1.txt")
# Calculate and record the average summary statistics of the initial parameters,
# when this value is reduced by 90%, we move on to the evaluations of all three
# density profiles.
bcd.ecm.mde.r1 <- unname(ests)
ind.nan.ecm.mde.r1 <- which(is.na(bcd.ecm.mde.r1[,2]))
bcd.ecm.mde.r1.valid <- bcd.ecm.mde.r1[-ind.nan.ecm.mde.r1,]
mean(bcd.ecm.mde.r1.valid[,2]) # 7.418826
min(bcd.ecm.mde.r1.valid[,2]) # 0.1727186
# Resample and record the parameter values to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.ecm.mde.r2 <- abc.bcd(ss.mat = bcd.ecm.mde.r1, paras = paras.ecm.mde.r1, bw = 0.5)
write.table(paras.ecm.mde.r2, "Round 2 parameters 10000 ecm_mde.txt")
# Clear the workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the results in .rds files.
save.sims.dir <- "BCD_results_ecm_mde_r2"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameter values to be evaluated in the current round.
paras.ecm.mde.r2 <- as.matrix(read.table("Round 2 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r2[i,], paras.ind = "ecm_mde")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_2_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r2.txt")
# Calculate and record the average summary statistics of the parameters
# evaluated in the current round, the stopping criterion (90% reduction in the
# mean summary statistics of the initial parameters) has not been met yet!
bcd.ecm.mde.r2 <- unname(ests)
ind.nan.ecm.mde.r2 <- which(is.na(bcd.ecm.mde.r2[,2]))
bcd.ecm.mde.r2.valid <- bcd.ecm.mde.r2[-ind.nan.ecm.mde.r2,]
mean(bcd.ecm.mde.r2.valid[,2]) # 5.5575
min(bcd.ecm.mde.r2.valid[,2]) # 0.1687818
# Resample and record the parameter values to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.ecm.mde.r3 <- abc.bcd(ss.mat = bcd.ecm.mde.r2, paras = paras.ecm.mde.r2, bw = 0.75)
write.table(paras.ecm.mde.r3, "Round 3 parameters 10000 ecm_mde.txt")
# Clear the workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the results in .rds files.
save.sims.dir <- "BCD_results_ecm_mde_r3"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameter values to be evaluated in the current round.
paras.ecm.mde.r3 <- as.matrix(read.table("Round 3 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores()/2
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r3[i,], paras.ind = "ecm_mde")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_3_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r3.txt")
# Calculate and record the average summary statistics of the parameters
# evaluated in the current round, the stopping criterion (90% reduction in the
# mean summary statistics of the initial parameters) has not been met yet!
bcd.ecm.mde.r3 <- unname(ests)
ind.nan.ecm.mde.r3 <- which(is.na(bcd.ecm.mde.r3[,2]))
bcd.ecm.mde.r3.valid <- bcd.ecm.mde.r3[-ind.nan.ecm.mde.r3,]
mean(bcd.ecm.mde.r3.valid[,2]) # 3.107602
min(bcd.ecm.mde.r3.valid[,2]) # 0.1549522
# Resample and record the parameter values to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.ecm.mde.r4 <- abc.bcd(ss.mat = bcd.ecm.mde.r3, paras = paras.ecm.mde.r3, bw = 1.125)
write.table(paras.ecm.mde.r4, "Round 4 parameters 10000 ecm_mde.txt")
# Clear the workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the results in .rds files.
save.sims.dir <- "BCD_results_ecm_mde_r4"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameter values to be evaluated in the current round.
paras.ecm.mde.r4 <- as.matrix(read.table("Round 4 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores()/2
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r4[i,], paras.ind = "ecm_mde")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_4_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r4.txt")
# Calculate and record the average summary statistics of the parameters
# evaluated in the current round, the stopping criterion (90% reduction in the
# mean summary statistics of the initial parameters) has been met! We record the
# values of $\eta$, $d_m$ and $\alpha$ and proceed to the evaluations of all
# three density profiles!
bcd.ecm.mde.r4 <- unname(ests)
ind.nan.ecm.mde.r4 <- which(is.na(bcd.ecm.mde.r4[,2]))
bcd.ecm.mde.r4.valid <- bcd.ecm.mde.r4[-ind.nan.ecm.mde.r4,]
mean(bcd.ecm.mde.r4.valid[,2]) # 1.025854
min(bcd.ecm.mde.r4.valid[,2]) # 0.1497734
7.427494*0.1
1.125*1.5
# Resample and record the parameter values to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.ecm.mde.r5 <- abc.bcd(ss.mat = bcd.ecm.mde.r4, paras = paras.ecm.mde.r4, bw = 1.6875)
write.table(paras.ecm.mde.r5, "Round 5 parameters 10000 ecm_mde.txt")
# Clear the workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the results in .rds files.
save.sims.dir <- "BCD_results_ecm_mde_r5"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameter values to be evaluated in the current round.
paras.ecm.mde.r5 <- as.matrix(read.table("Round 5 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r5[i,], paras.ind = "ecm_mde")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_5_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r5.txt")
bcd.ecm.mde.r5 <- unname(ests)
ind.nan.ecm.mde.r5 <- which(is.na(bcd.ecm.mde.r5[,2]))
bcd.ecm.mde.r5.valid <- bcd.ecm.mde.r5[-ind.nan.ecm.mde.r5,]
mean(bcd.ecm.mde.r5.valid[,2]) # 0.7909662
min(bcd.ecm.mde.r5.valid[,2]) # 0.1252145
setwd("F:/学术/ABC-BCD revisit 2022/CV 4 data simulations/Dataset 2/TC ECM MDE")
# Clear the workspace and load the necessary packages.
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
# Source functions.
source("Automatic.R")
# Optional line: set the directory to store the results in .rds files.
save.sims.dir <- "BCD_results_all3_r1"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
# Read in the parameter values at the end of the evaluations of the ECM+MDE
# density profile.
paras.ecm.mde.r5 <- as.matrix(read.table("Round 5 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
# Read in the values of $\eta$, $d_m$ and $\alpha$ from the parameter set above
# as the initial values of $\eta$, $d_m$ and $\alpha$ in the current
# evaluations, sample the values of the other parameters from the initial
# distributions.
set.seed(120)
set.seed(120)
RNGkind(sample.kind = "Rejection")
dn<-runif(10000,0.000069,0.02)
gamma<-runif(10000,0.005,0.26)
eta<-paras.ecm.mde.r5[,3]
dm<-paras.ecm.mde.r5[,4]
alpha<-paras.ecm.mde.r5[,5]
rn<-runif(10000,3.5,9)
paras.all3.r1 <- cbind(dn,gamma,eta,dm,alpha,rn)
write.table(paras.all3.r1,"Round 1 parameters 10000 all 3.txt")
# Set up the parallel running scheme.
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
paras.all3.r1 <- as.matrix(read.table("Round 1 parameters 10000 all 3.txt", sep = "",
header = TRUE))
# Compute the summary statistics (Bhattacharyya distance) for each parameter
# vector in the parameter set.
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.all3.r1[i,], paras.ind = "all_three")
# Optional line: write the results into .rds files.
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_1_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_all3_r1.txt")
# Calculate and record the average summary statistics of the initial parameters,
# when this value is reduced by 98%, we terminate the algorithm.
bcd.all3.r1 <- unname(ests)
ind.nan.all3.r1 <- which(is.na(bcd.all3.r1[,2]))
bcd.all3.r1.valid <- bcd.all3.r1[-ind.nan.all3.r1,]
mean(bcd.all3.r1.valid[,2]) # 4.516383
min(bcd.all3.r1.valid[,2]) # 0.265723
# Resample and record the parameter values to be evaluated in the next round.
set.seed(123)
RNGkind(sample.kind = "Rejection")
paras.all3.r2 <- abc.bcd(ss.mat = bcd.all3.r1, paras = paras.all3.r1, bw = 0.5)
write.table(paras.all3.r2, "Round 2 parameters 10000 all 3.txt")
